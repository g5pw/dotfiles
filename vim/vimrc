" vim: foldmethod=marker foldlevel=0
set nocompatible | filetype indent plugin on | syn on
" VAM setup {{{
fun! SetupVAM()
    let c = get(g:, 'vim_addon_manager', {})
    let g:vim_addon_manager = c
    let c.plugin_root_dir = expand('$HOME', 1) . '/.vim/vim-addons'

    " Force your ~/.vim/after directory to be last in &rtp always:
    " let g:vim_addon_manager.rtp_list_hook = 'vam#ForceUsersAfterDirectoriesToBeLast'

    " most used options you may want to use:
    " let c.log_to_buf = 1
    " let c.auto_install = 0
    let &rtp.=(empty(&rtp)?'':',').c.plugin_root_dir.'/vim-addon-manager'
    if !isdirectory(c.plugin_root_dir.'/vim-addon-manager/autoload')
	execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '
		    \       shellescape(c.plugin_root_dir.'/vim-addon-manager', 1)
    endif
    " }}}
    " Activated plugins -------------------------------------------------- {{{
    call vam#ActivateAddons([])
    " Text {{{
    VAMActivate UltiSnips
    VAMActivate vim-snippets
    VAMActivate repeat
    VAMActivate matchit.zip
    VAMActivate Gundo
    VAMActivate github:kana/vim-smartinput
    VAMActivate visual-increment
    VAMActivate commentary
    VAMActivate YouCompleteMe
    VAMActivate Tabular
    VAMActivate surround
    VAMActivate abolish
    VAMActivate vim-multiple-cursors
    VAMActivate wildfire
    VAMActivate vim-autoformat
    VAMActivate vim-expand-region
    VAMActivate better-whitespace
    " }}}
    " Movement {{{
    VAMActivate EasyMotion
    VAMActivate unimpaired
    " }}}
    " File System/Integration {{{
    VAMActivate vimfiler
    VAMActivate fugitive
    VAMActivate extradite
    VAMActivate vcscommand
    VAMActivate FSwitch
    VAMActivate VimOrganizer
    VAMActivate editorconfig-vim
    VAMActivate Tagbar
    VAMActivate vim-fireplace
    VAMActivate dispatch
    VAMActivate github:tpope/vim-vinegar
    VAMActivate github:Keithbsmiley/investigate.vim
    VAMActivate github:farseer90718/vim-taskwarrior
    VAMActivate vimwiki
    VAMActivate github:teranex/vimwiki-tasks
    "}}}
    " Language support {{{
    VAMActivate SingleCompile
    VAMActivate cern_root
    VAMActivate vim-css3-syntax
    " call add(addons, 'github:skammer/vim-css-color')
    VAMActivate vim-dokuwiki
    VAMActivate octave%3600
    VAMActivate vim-clojure-static
    VAMActivate haskellmode-vim
    VAMActivate Haskell_Conceal
    VAMActivate ragtag
    VAMActivate wmgraphviz
    VAMActivate Emmet
    VAMActivate LaTeX_Box
    VAMActivate github:fmoralesc/vim-pinpoint
    " }}}
    " Utilities {{{
    VAMActivate github:inside/vim-search-pulse
    VAMActivate Syntastic
    VAMActivate SudoEdit
    VAMActivate Vitality
    VAMActivate Splice
    VAMActivate vim-signify
    VAMActivate vim-startify
    VAMActivate goyo
    VAMActivate github:junegunn/limelight.vim
    VAMActivate vimproc
    VAMActivate unite
    VAMActivate github:Shougo/unite-outline
    VAMActivate github:Shougo/unite-help
    VAMActivate github:Shougo/neomru.vim
    VAMActivate vim-airline
    VAMActivate Crunch
    " }}}
    " Themes {{{
    VAMActivate Solarized
    VAMActivate jellybeans
    " }}}
    " TextObjects {{{
    VAMActivate github:coderifous/textobj-word-column.vim
    VAMActivate textobj-diff
    VAMActivate textobj-comment
    VAMActivate textobj-function
    VAMActivate textobj-fold
    VAMActivate textobj-entire
    VAMActivate textobj-line
    VAMActivate textobj-latex
    VAMActivate vim-textobj-underscore
    VAMActivate github:wellle/targets.vim
    " }}}
" }}}
endf
call SetupVAM()
" }}}
" Basic options {{{

"Set Mapleader
let g:mapleader = ","
let g:maplocalleader = ";"

set encoding=utf-8
set showmatch		" When a bracket is inserted, briefly jump to the matching one.
set hidden		" do not close buffers, but hide them!
set autoindent		" always set autoindenting on
set copyindent		" copy the previous indentation type on autoindenting
set noexpandtab
set softtabstop=4
set shiftwidth=4
set shiftround		" use multiple of shiftwidth when indenting with '<' and '>'"
set ignorecase		" ignore case when searching
set smartcase		" ignore case if search pattern is all lowercase,
			" case-sensitive otherwise
set smarttab		" insert tabs on the start of a line according to
set hlsearch		" highlight search terms
set incsearch		" show search matches as you type"
set tildeop		" Use tilde as an operator
set ruler
set backspace=indent,eol,start
set history=1000        " remember more commands and search history
set undolevels=1000     " use many levels of undo
set title               " change the terminal's title
set laststatus=2	" Always show statusline
set scrolloff=5		" Always keep 3 lines above/below cursor
set undofile		" Save undo tree in file
set undodir=~/.vim/tmp/undo//     " undo files

set splitright
set splitbelow
set fillchars=diff:⣿,vert:│,fold:-
set autowriteall
set autoread

set lazyredraw          " redraw only when we need to."

set virtualedit=block,onemore

set switchbuf=useopen,usetab,newtab	" Specify the behavior when switching between buffers
set viminfo^=%				" Remember info about open buffers on close

" add regexp magic
set magic

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=400

" Retain custom icons & stuff
set backupcopy=yes

set pastetoggle=<F2>	"Disable auto indent when pasting

set cursorline

" WildIgnore menu {{{
set wildmenu
set wildmode=longest,list:longest
set wildignore=*.swp,*.bak,*.pyc,*.class
set wildignore+=.hg,.git,.svn
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store?                      " OSX bullshit
" }}}

" Folding settings {{{
set foldmethod=syntax   " fold based on syntax
set foldnestmax=4       " deepest fold is 4 levels
set foldenable          " fold by default
set foldlevel=10        " this is just what i use

" Custom folded text function by sjl
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')
    let line = substitute(line, split(&foldmarker, ',')[0], '', '')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 9
    return line . ' ⤥ ' . repeat("…", fillcharcount) . ' (' . foldedlinecount .')'
endfunction " }}}
set foldtext=MyFoldText()
" }}}

" Store swap files in fixed location, not current directory.
set dir=~/.vim/tmp/swap//,/var/tmp//,/tmp//,.

" Disable vim intro message
set shortmess+=I

set complete=.,w,b,u,t,i,kspell
set completeopt=menu,preview

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set showbreak=↪

set wrap
set textwidth=80
set formatoptions=qrn1
set colorcolumn=80

"Enable mouse support in terminal
set mouse=a
set ttymouse=xterm2

"Always use cscope
if filereadable("cscope.out")
    set nocscopeverbose
    cscope add cscope.out
endif
set cscopetag
set cscopeverbose
" Don't spellcheck LaTeX comments:
let g:tex_comment_nospell= 1

set number
set relativenumber

" Don't wait a lot for mappings
set timeoutlen=300
" }}}
" Plugin settings {{{
" SingleCompile {{{
let g:SingleCompile_showquickfixiferror = 1
let g:SingleCompile_showresultafterrun = 1
let g:SingleCompile_silentcompileifshowquickfix = 1
call SingleCompile#ChooseCompiler('c','clang') " Clang is the default C compiler
" }}}
" vim-airline {{{
let g:airline_powerline_fonts = 1
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#hunks#enabled = 1
" }}}
" Latex-Box {{{
let g:LatexBox_viewer = "open -a Skim"
let g:LatexBox_latexmk_preview_continuously = 1
let g:LatexBox_latexmk_async = 1
let g:LatexBox_Folding = 1
let g:LatexBox_quickfix = 2
let g:LatexBox_split_width = 20
" }}}
" VCSCommand {{{
let VCSCommandMapPrefix = '<Leader>v'
" }}}
" Haskell dirs {{{
let g:haddock_browser = "elinks"
let g:haddock_docdir = "/opt/local/share/doc/ghc/html/"
" }}}
" VimRoom {{{
let g:vimroom_sidebar_height = 5
let g:vimroom_width = 100
" }}}
" Unite stuff {{{
let g:unite_data_directory = expand('~/.vim/tmp/unite')
let g:unite_winheight = 20
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--nocolor --noheading'
let g:unite_source_grep_recursive_opt = ''
let g:unite_enable_start_insert = 1
let g:unite_enable_short_source_names = 1
let g:unite_prompt = '» '
" Enable yank history collection
let g:unite_source_history_yank_enable = 1
" Use the fuzzy matcher for everything
call unite#filters#matcher_default#use(['matcher_fuzzy'])
" Use the rank sorter for everything
call unite#filters#sorter_default#use(['sorter_rank'])
" }}}
" UltiSnips settings {{{
let g:UltiSnipsExpandTrigger = '<c-l>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
let g:UltiSnipsListSnippets = '<c-h>'
" }}}
" YouCompleteMe settings {{{
let g:ycm_key_invoke_completion = '<C-\>'
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
let g:ycm_extra_conf_globlist = ['~/Documents/Projects/*', '~/.vim/ycm_extra_conf.py']
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_collect_identifiers_from_tags_files  = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_semantic_triggers = {
    \	'tex' : [ '{', '\' ],
    \ }
" }}}
" Enable Doxygen auto-load {{{
let g:load_doxygen_syntax=1
" }}}
" Signify options {{{
let g:signify_vcs_list = [ 'git', 'svn', 'hg']
let g:signify_mapping_next_hunk = '<leader>gj'
let g:signify_mapping_prev_hunk = '<leader>gk'
let g:signify_mapping_toggle_highlight = '<leader>gh'
" }}}
" Tagbar options and maps {{{
let tagbar_autoclose = 1
let tagbar_autofocus = 1
let g:tagbar_singleclick = 1
" }}}
" VimFiler settings {{{
let g:vimfiler_as_default_explorer=1
let g:vimfiler_data_directory = expand('~/.vim/tmp/vimfiler/')
let g:vimfiler_quick_look_command = 'qlmanage -p'
let g:vimfiler_ignore_pattern = '\(^\.\|.py[oc]$\)'
" VimFiler icons
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_marked_file_icon = '✓'
" }}}
let g:better_whitespace_filetypes_blacklist = ['unite', 'startify']
" Enable space error highlighting for portfiles {{{
let g:portfile_highlight_space_errors=1
" }}}
" EasyMotion settings {{{
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)
nmap S <Plug>(easymotion-sn)
xmap S <Plug>(easymotion-sn)
omap Z <Plug>(easymotion-sn)
" }}}
" Startify options {{{
let g:startify_bookmarks = [ $MYVIMRC, $ZDOTDIR.'.zshrc' ]
let g:startify_skiplist = [
           \ 'COMMIT_EDITMSG',
	   \ 'svn-commit.tmp',
           \ $VIMRUNTIME .'/doc',
           \ 'vim-addons/.*/doc'
           \ ]
let g:startify_custom_indices = ['f', 'd', 'g', 'r', 'c']
let g:startify_list_order = ['bookmarks', 'files', 'dir', 'sessions']
let g:startify_custom_header =
	\ map(split(system('fortune -s | cowsay -f meow'), '\n'), '"   ". v:val') + ['']
let g:startify_enable_special = 0
" }}}
" Set Syntastic style {{{
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_tcl_nagelfar_conf = ''
let g:syntastic_python_checkers = ['pyflakes']
let g:syntastic_c_checkers = ['splint', 'make', 'gcc']
let g:syntastic_tex_checkers = ['chktex']
let g:syntastic_always_populate_loclist = 1
" }}}
let g:extradite_showhash=1
" SudoEdit {{{
if !has('gui_running')
    let g:sudoAuth = 'sudo'
endif
let g:sudo_tee = '/opt/local/libexec/gnubin/tee'
" }}}
" VimWiki {{{
let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki', 'path_html': '~/Sites/vimwiki'}]
" }}}
" Gundo {{{
let g:gundo_close_on_revert=1
" }}}
" }}}
" Mappings {{{
" SingleCompile
noremap <leader>c :SCCompile<CR>
noremap <leader>cr :SCCompileRun<CR>

noremap <F3> :Autoformat<CR>
" Made D behave
nnoremap D d$

" highlight last inserted text
nmap gV `[v`]

" Unite mappings {{{

" General fuzzy search
nnoremap <silent> u<space> :<C-u>Unite
      \ -buffer-name=files buffer file_mru bookmark file_rec/async<CR>

" Quick registers
nnoremap <silent> ur :<C-u>Unite -buffer-name=register register<CR>

" Quick buffer and mru
nnoremap <silent> uu :<C-u>Unite -quick-match -buffer-name=buffers buffer file_mru<CR>

" Quick yank history
nnoremap <silent> uy :<C-u>Unite -buffer-name=yanks history/yank<CR>

" Quick outline
nnoremap <silent> uo :<C-u>Unite -buffer-name=outline -vertical outline<CR>

" Quick sessions (projects)
nnoremap <silent> up :<C-u>Unite -buffer-name=sessions session<CR>

" Quick sources
nnoremap <silent> ua :<C-u>Unite -buffer-name=sources source<CR>

" Quickly switch lcd
nnoremap <silent> ud
      \ :<C-u>Unite -buffer-name=change-cwd -default-action=lcd directory_mru<CR>

" Quick file search
nnoremap <silent> uf :<C-u>Unite -buffer-name=files file_rec/async file/new<CR>

" Quick grep from cwd
nnoremap <silent> ug :<C-u>Unite -buffer-name=grep grep:.<CR>

" Quick grep from current word
nnoremap <silent> uG :<C-u>UniteWithCursorWord -buffer-name=grep -default-action=above -auto-preview grep:. <CR>

" Quick help
nnoremap <silent> uh :<C-u>Unite -buffer-name=help help<CR>

" Quick line using the word under cursor
nnoremap <silent> ul :<C-u>UniteWithCursorWord -buffer-name=search_file line<CR>

" Quick MRU search
nnoremap <silent> um :<C-u>Unite -buffer-name=mru file_mru<CR>

" Quick find
nnoremap <silent> un :<C-u>Unite -buffer-name=find find:.<CR>

" Quick commands
nnoremap <silent> uc :<C-u>Unite -buffer-name=commands command<CR>

" Quick bookmarks
nnoremap <silent> ub :<C-u>Unite -buffer-name=bookmarks bookmark<CR>

" Fuzzy search from current buffer
" nnoremap <silent> ub :<C-u>UniteWithBufferDir
" \ -buffer-name=files -prompt=%\ buffer file_mru bookmark file<CR>

" Quick commands
nnoremap <silent> u; :<C-u>Unite -buffer-name=history history/command command<CR>
"}}}
" YouCompleteMe mappings
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Boxes mappings
vnoremap gcb :!boxes -s 80 -a c<CR>

" Toggle folds with space bar
nnoremap <Space> za
nnoremap <Leader>. :TagbarToggle<CR>
nnoremap <silent> <leader>/ :nohlsearch<CR>:echo 'Search highlight cleared'<CR>
" Parse file with astyle
nnoremap <silent> <Leader>as :%!astyle<CR>

" VimFiler mappings
nnoremap <leader>cd :<C-u>:VimFilerBufferDir -buffer-name=explorer -toggle<CR>`

" Changes mappings
nnoremap <silent><leader>r :ToggleChangeView<CR>

" Parse dir with ctags
nnoremap <silent> <Leader>ct :! ctags -R --c++-kinds=+p --fields=+iaS --extra=+q<cr>
" FuGitive
nnoremap <silent><leader>gd :Gdiff<cr>
nnoremap <silent><leader>gc :Gcommit<cr>
nnoremap <silent><leader>gb :Gblame<cr>
nnoremap <silent><leader>gp :Git push<cr>
nnoremap <silent><leader>gr :Gremove<cr>
nnoremap <silent><leader>gs :Gstatus<cr>
nnoremap <silent><leader>gw :Gwrite<cr>
" Extradite options
nnoremap <silent><leader>ge :Extradite<CR>
" Gundo maps
nnoremap U :GundoToggle<CR>
" Quickly edit the vimrc file
nnoremap <silent> <leader>ve :e $MYVIMRC<CR>

" f7 toggles spelling on/off
nnoremap <F7> :setlocal spell! spell?<CR>

" Map Y to something sane
nmap Y y$

" Cscope command abbreviations
cnoreabbrev csa cs add
cnoreabbrev csf cs find
cnoreabbrev csk cs kill
cnoreabbrev csr cs reset
cnoreabbrev css cs show
cnoreabbrev csh cs help

" SudoEdit abbrev
cnoreabbrev w!! :SudoWrite

" MacVim, don't be silly
let g:macvim_skip_cmd_opt_movement = 1
" Arrow is for moving around splits
nnoremap <Up>        <C-W>k
nnoremap <Down>      <C-W>j
nnoremap <Left>      <C-W>h
nnoremap <Right>     <C-W>l
" Ctrl + Arrow is for moving text around and relies on vim-unimpaired by Tim Pope.
nmap <C-Up>   [e
imap <C-Up>   <C-O><C-Up>
vmap <C-Up>   [egv
nmap <C-Down> ]e
imap <C-Down> <C-O><C-Down>
vmap <C-Down> ]egv
" Ctrl + Arrows: Indenting shortcuts
nmap <C-Left>   <<
imap <C-Left>   <C-O><C-Left>
vmap <C-Left>   <gv
nmap <C-Right>  >>
imap <C-Right>  <C-O><C-Right>
vmap <C-Right>  >gv
" Shift + Arrow is for moving splits around
nnoremap <S-Up>      <C-W>K
nnoremap <S-Down>    <C-W>J
nnoremap <S-Left>    <C-W>H
nnoremap <S-Right>   <C-W>L
" Alt + Arrow is for minimizing/maximizing splits
nnoremap <M-Up>      <C-W>_
nnoremap <M-Down>    <C-W>=
nnoremap <M-Left>    <C-W>=
nnoremap <M-Right>   <C-W><Bar>
" Shift + Alt + Arrow is for resizing splits
nnoremap <S-M-Up>      <C-W>-
nnoremap <S-M-Down>    <C-W>+
nnoremap <S-M-Left>    <C-W><
nnoremap <S-M-Right>   <C-W>>

" Remaps for iTerm. It won't show meta as M but as T
if $TERM_PROGRAM == "iTerm.app"
    nmap <T-p> <M-p>
    nmap <T-P> <M-p>
    nnoremap <S-T-Up>    <S-M-Up>
    nnoremap <S-T-Down>  <S-M-Down>
    nnoremap <S-T-Left>  <S-M-Left>
    nnoremap <S-T-Right> <S-M-Right>
    nnoremap <T-Up>      <M-Up>
    nnoremap <T-Down>    <M-Down>
    nnoremap <T-Left>    <M-Left>
    nnoremap <T-Right>   <M-Right>
endif
" Mappings end }}}
" Autocmds {{{
" Vim {{{
augroup vim
    au!
    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au FileType help nnoremap <silent> <buffer> q :q<CR>
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
" }}}
" VCS {{{
augroup vcs
    au!
    " Check spelling in VCS commit messages
    autocmd FileType svn,gitcommit setlocal spell noshowmatch
    " Disable jump to last known position
    autocmd FileType svn,gitcommit augroup last_pos
		\ au!
		\augroup END
augroup END
" }}}
" Misc {{{
augroup misc
    au!
    " Auto-reload vimrc on save
    autocmd BufWritePost $MYVIMRC source $MYVIMRC

    " Save on focus lost.
    autocmd FocusLost * :silent! :w

    " Resize splits when the window is resized
    autocmd VimResized * :wincmd =

    " Exit paste mode when exiting insert
    autocmd InsertLeave * set nopaste
augroup END
" }}}
" Return to last edit position when opening files (You want this!) {{{
augroup last_pos
    au!
    autocmd BufReadPost *
		\ if &ft !~ 'git\|svn\|hg' && line("'\"") > 0 && line("'\"") <= line("$") |
		\   exe "normal! g`\"" |
		\ endif
augroup END
" }}}
" Autocmds end }}}
" Visual stuff {{{
if &t_Co > 2 || has("gui_running")
    " switch syntax highlighting on, when the terminal has colors
    syntax enable
endif

if has("gui_running")
    set ttyfast
    set guifont=Menlo\ for\ Powerline:h12
    " MacVim runtime path fix
    set rtp+=/opt/local/share/vim/vimfiles
endif

if &t_Co >= 256 || has("gui_running")
    colorscheme solarized
    set background=dark

    let g:doxygen_enhanced_color=1
    highlight doxygenBrief ctermbg=240

    highlight StartifyBracket ctermfg=240 guifg=#6b6b60
    highlight StartifyFooter  ctermfg=203 guifg=#fe655a
    highlight StartifyHeader  ctermfg=111 guifg=#98A8FF
    highlight StartifyNumber  ctermfg=215 guifg=#F7BC66
    highlight StartifyFile    ctermfg=227 guifg=#F9FF5E
    highlight StartifyPath    ctermfg=245 guifg=#9C9C9C
    highlight StartifySlash   ctermfg=240 guifg=#6B6B6B
endif
" }}}
" Custom functions {{{
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

function! GoyoBefore()
  Limelight
endfunction

function! GoyoAfter()
  Limelight!
endfunction

let g:goyo_callbacks = [function('GoyoBefore'), function('GoyoAfter')]
" }}}
