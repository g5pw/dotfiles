" vim: foldmethod=marker foldlevel=0
set nocompatible | filetype indent plugin on | syn on
" Plugins {{{
call plug#begin('~/.vim/plugged')
" Text {{{
Plug 'sirver/UltiSnips' | Plug 'honza/vim-snippets'
Plug 'tpope/vim-repeat'
Plug 'andymass/vim-matchup'
Plug 'simnalamburt/vim-mundo'
Plug 'kana/vim-smartinput'
Plug 'tyru/caw.vim'
"Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}
Plug 'tpope/vim-surround'
" }}}
" Movement {{{
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-unimpaired'
" }}}
" File System/Integration {{{
Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' } | Plug 'kristijanhusak/defx-git' | Plug 'kristijanhusak/defx-icons'
Plug 'tpope/vim-fugitive'
Plug 'rhysd/committia.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'voldikss/vim-floaterm'
set  runtimepath+=/opt/local/share/fzf/vim/
Plug 'yuki-ycino/fzf-preview.vim'
Plug 'ryanoasis/vim-devicons'
"}}}
" Language support {{{
Plug 'xuhdev/SingleCompile' , {'on': ['SCCompile', 'SCCompileRun', 'SCCCompileRunAsync']}
Plug 'tpope/vim-ragtag', {'for': 'html'}
Plug 'mattn/emmet-vim', {'for': 'html'}
Plug 'lervag/vimtex', {'for': 'tex'}
Plug 'fmoralesc/vim-pinpoint'
Plug 'sheerun/vim-polyglot'
Plug 'jceb/vim-orgmode'
" }}}
" Utilities {{{
Plug 'dense-analysis/ale'
Plug 'mhinz/vim-signify'
Plug 'lambdalisue/suda.vim'
Plug 'vim-airline/vim-airline'
" }}}
" Themes {{{
Plug 'dracula/vim'
Plug 'tyrannicaltoucan/vim-deep-space'
Plug 'edkolev/tmuxline.vim'
" }}}
" TextObjects {{{
Plug 'kana/vim-textobj-user' | Plug 'glts/vim-textobj-comment' | Plug 'kana/vim-textobj-diff' | Plug 'kana/vim-textobj-function' | Plug 'kana/vim-textobj-line' | Plug 'kana/vim-textobj-underscore'
" }}}
call plug#end()
" }}}
" Basic options {{{

"Set Mapleader
let g:mapleader = "\<Space>"
let g:maplocalleader = ";"

set encoding=utf-8
set showmatch		" When a bracket is inserted, briefly jump to the matching one.
set hidden		" do not close buffers, but hide them!
set autoindent		" always set autoindenting on
set copyindent		" copy the previous indentation type on autoindenting
set noexpandtab
set softtabstop=4
set shiftwidth=4
set shiftround		" use multiple of shiftwidth when indenting with '<' and '>'"
set ignorecase		" ignore case when searching
set smartcase		" ignore case if search pattern is all lowercase,
			" case-sensitive otherwise
set smarttab		" insert tabs on the start of a line according to
set hlsearch		" highlight search terms
set incsearch		" show search matches as you type"
set tildeop		" Use tilde as an operator
set ruler
set backspace=indent,eol,start
set history=1000        " remember more commands and search history
set undolevels=1000     " use many levels of undo
set title               " change the terminal's title
set laststatus=2	" Always show statusline
set scrolloff=5		" Always keep 3 lines above/below cursor
set undofile		" Save undo tree in file
set undodir=~/.vim/tmp/undo//     " undo files

set splitright
set splitbelow
set fillchars=diff:⣿,vert:│,fold:-
set autowriteall
set autoread

set lazyredraw          " redraw only when we need to.
set noshowmode          " Don't show mode text

set virtualedit=block,onemore

set switchbuf=useopen,usetab,newtab	" Specify the behavior when switching between buffers
set viminfo^=%				" Remember info about open buffers on close

" add regexp magic
set magic

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=400

" Retain custom icons & stuff
set backupcopy=yes

set pastetoggle=<F2>	"Disable auto indent when pasting

set cursorline

" WildIgnore menu {{{
set wildmenu
set wildmode=longest,list:longest
set wildignore=*.swp,*.bak,*.pyc,*.class
set wildignore+=.hg,.git,.svn
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store?                      " OSX bullshit
" }}}

" Folding settings {{{
set foldmethod=syntax   " fold based on syntax
set foldnestmax=4       " deepest fold is 4 levels
set foldenable          " fold by default
set foldlevel=10        " this is just what i use

" Custom folded text function by sjl
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')
    let line = substitute(line, split(&foldmarker, ',')[0], '', '')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 9
    return line . ' ⤥ ' . repeat("…", fillcharcount) . ' (' . foldedlinecount .')'
endfunction " }}}
set foldtext=MyFoldText()
" }}}

" Store swap files in fixed location, not current directory.
set dir=~/.vim/tmp/swap//,/var/tmp//,/tmp//,.

" Disable vim intro message
set shortmess+=I

set complete=.,w,b,u,t,i,kspell
set completeopt=menu,preview

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸-,eol:¬,extends:❯,precedes:❮,trail:·
set showbreak=↪

set wrap
set textwidth=80
set formatoptions=qrn1

" Correctly join lines with comments
if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j
endif

set colorcolumn=80

"Enable mouse support in terminal
set mouse=a
" nvim-only settings
if !has('nvim')
    set ttymouse=xterm2
    set inccommand=nosplit
endif

"Always use cscope
if filereadable("cscope.out")
    set nocscopeverbose
    cscope add cscope.out
endif
set cscopetag
set cscopeverbose
" Don't spellcheck LaTeX comments:
let g:tex_comment_nospell= 1

set number
set relativenumber

" Don't wait a lot for mappings
set timeoutlen=300
" }}}
" Plugin settings {{{
" ALE {{{
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '▲'
" }}}
" defx {{{
nnoremap <silent> - :Defx `expand('%:p:h')`<cr>
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>
		\ defx#do_action('open')
    nnoremap <silent><buffer><expr> c
		\ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
		\ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
		\ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
		\ defx#do_action('open')
    nnoremap <silent><buffer><expr> E
		\ defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P
		\ defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o
		\ defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K
		\ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
		\ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M
		\ defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C
		\ defx#do_action('toggle_columns',
		\                'icon:indent:icons:filename:type:size:time')
    nnoremap <silent><buffer><expr> S
		\ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d
		\ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
		\ defx#do_action('rename')
    nnoremap <silent><buffer><expr> !
		\ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x
		\ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
		\ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
		\ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;
		\ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h
		\ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
		\ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
		\ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
		\ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
		\ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
		\ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
		\ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
		\ defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g>
		\ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
		\ defx#do_action('change_vim_cwd')
endfunction
" Add icon
call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ })
" Set appearance
call defx#custom#option('_', {
      \ 'show_ignored_files': 0,
      \ 'buffer_name': 'defxplorer',
      \ 'columns': 'icon:indent:icons:filename',
      \ })
" }}}
" fzf-preview {{{
" Commands used for fzf preview.
" The file name selected by fzf becomes {}
let g:fzf_preview_command = 'bat --color=always --style=full {-1}'

" Commands used to get the file list from project
let g:fzf_preview_filelist_command = 'rg --files --hidden --follow --no-messages -g \!"* *"'

let g:fzf_binary_preview_command = 'hexyl --color=always {}'

" Commands used for current file lines
let g:fzf_preview_lines_command = 'bat --color=always --style=grid --theme=ansi-dark --plain'

" Command to be executed after file list creation
let g:fzf_preview_filelist_postprocess_command = 'gxargs -d "\n" exa --color=always'

let g:fzf_preview_use_dev_icons = 1

let g:fzf_preview_preview_key_bindings = 'ctrl-f:page-down,ctrl-b:page-up,ctrl-d:half-page-down,ctrl-u:half-page-up,shift-ctrl-f:preview-page-down,shift-ctrl-u:preview-page-up,?:toggle-preview'
" }}}
" SingleCompile {{{
let g:SingleCompile_showquickfixiferror = 1
let g:SingleCompile_showresultafterrun = 1
let g:SingleCompile_silentcompileifshowquickfix = 1
" call SingleCompile#ChooseCompiler('c','clang') " Clang is the default C compiler
" }}}
" vim-airline {{{
let g:airline_powerline_fonts = 1
let g:airline_mode_map = {
	    \ '__' : '-',
	    \ 'c'  : 'C',
	    \ 'i'  : 'I',
	    \ 'ic' : 'I',
	    \ 'ix' : 'I',
	    \ 'n'  : 'N',
	    \ 'ni' : 'N',
	    \ 'no' : 'N',
	    \ 'R'  : 'R',
	    \ 'Rv' : 'R',
	    \ 's'  : 'S',
	    \ 'S'  : 'S',
	    \ '' : 'S',
	    \ 't'  : 'T',
	    \ 'v'  : 'V',
	    \ 'V'  : 'V',
	    \ '' : 'V',
	    \ }
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#hunks#enabled = 1
" }}}
" Latex-Box {{{
let g:LatexBox_viewer = "open -a Skim"
let g:LatexBox_latexmk_preview_continuously = 1
let g:LatexBox_latexmk_async = 1
let g:LatexBox_Folding = 1
let g:LatexBox_quickfix = 2
let g:LatexBox_split_width = 20
" }}}
" VCSCommand {{{
let VCSCommandMapPrefix = '<Leader>v'
" }}}
" Signify options {{{
let g:signify_vcs_list = [ 'git', 'svn', 'hg']
let g:signify_mapping_next_hunk = '<leader>gj'
let g:signify_mapping_prev_hunk = '<leader>gk'
let g:signify_mapping_toggle_highlight = '<leader>gh'
" }}}
" Enable space error highlighting for portfiles {{{
let g:portfile_highlight_space_errors=1
" }}}
" EasyMotion settings {{{
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)
nmap S <Plug>(easymotion-sn)
xmap S <Plug>(easymotion-sn)
omap Z <Plug>(easymotion-sn)
" }}}
" committia {{{
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    endif

    nmap ,, :wq<cr>
    nmap ,. :cq<cr>

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction
" }}}
" }}}
" Mappings {{{
" Spacemacs-like mappings {{{
nnoremap <leader>fs :w<CR>
nnoremap <leader>bd :bd<CR>
nnoremap <silent> <leader>ff :FzfPreviewDirectoryFiles<cr>
" }}}

" SingleCompile {{{
noremap <leader>c :SCCompile<CR>
noremap <leader>cr :SCCompileRun<CR>
" }}}

" Made D behave
nnoremap D d$

" highlight last inserted text
nmap gV `[v`]

" Boxes mappings
vnoremap gcb :!boxes -s 80 -a c<CR>

" Toggle folds with space bar
nnoremap <Leader>. :TagbarToggle<CR>
" Parse file with astyle
nnoremap <silent> <Leader>as :%!astyle<CR>

" Changes mappings
nnoremap <silent><leader>r :ToggleChangeView<CR>

" Parse dir with ctags
nnoremap <silent> <Leader>ct :! ctags -R --c++-kinds=+p --fields=+iaS --extra=+q<cr>
" FuGitive
nnoremap <silent><leader>gd :Gdiff<cr>
nnoremap <silent><leader>gc :Gcommit<cr>
nnoremap <silent><leader>gb :Gblame<cr>
nnoremap <silent><leader>gp :Git push<cr>
nnoremap <silent><leader>gr :Gremove<cr>
nnoremap <silent><leader>gs :Gstatus<cr>
nnoremap <silent><leader>gw :Gwrite<cr>
" UndoTree maps
nnoremap U :<CR>
" Quickly edit the vimrc file
nnoremap <silent> <leader>ve :e $MYVIMRC<CR>

" Ex-mode is useless!
nnoremap Q @@

" f7 toggles spelling on/off
nnoremap <F7> :setlocal spell! spell?<CR>

" Map Y to something sane
nmap Y y$

" Cscope command abbreviations
cnoreabbrev csa cs add
cnoreabbrev csf cs find
cnoreabbrev csk cs kill
cnoreabbrev csr cs reset
cnoreabbrev css cs show
cnoreabbrev csh cs help

" Keep region highlighed when indenting {{{
vnoremap < <gv
vnoremap > >gv
" }}}

" Do something smarter with enter and backspace {{{
nnoremap <BS> {
onoremap <BS> {
vnoremap <BS> {

nnoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
onoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
vnoremap <CR> }
" }}}

" SudoEdit abbrev
cnoreabbrev W :w suda://%

" MacVim, don't be silly
let g:macvim_skip_cmd_opt_movement = 1
" Arrow is for moving around splits
nnoremap <Up>        <C-W>k
nnoremap <Down>      <C-W>j
nnoremap <Left>      <C-W>h
nnoremap <Right>     <C-W>l
" Ctrl + Arrow is for moving text around and relies on vim-unimpaired by Tim Pope.
nmap <C-Up>   [e
imap <C-Up>   <C-O><C-Up>
vmap <C-Up>   [egv
nmap <C-Down> ]e
imap <C-Down> <C-O><C-Down>
vmap <C-Down> ]egv
" Ctrl + Arrows: Indenting shortcuts
nmap <C-Left>   <<
imap <C-Left>   <C-O><C-Left>
vmap <C-Left>   <gv
nmap <C-Right>  >>
imap <C-Right>  <C-O><C-Right>
vmap <C-Right>  >gv
" Shift + Arrow is for moving splits around
nnoremap <S-Up>      <C-W>K
nnoremap <S-Down>    <C-W>J
nnoremap <S-Left>    <C-W>H
nnoremap <S-Right>   <C-W>L
" Alt + Arrow is for minimizing/maximizing splits
nnoremap <M-Up>      <C-W>_
nnoremap <M-Down>    <C-W>=
nnoremap <M-Left>    <C-W>=
nnoremap <M-Right>   <C-W><Bar>
" Shift + Alt + Arrow is for resizing splits
nnoremap <S-M-Up>      <C-W>-
nnoremap <S-M-Down>    <C-W>+
nnoremap <S-M-Left>    <C-W><
nnoremap <S-M-Right>   <C-W>>

" Remaps for iTerm. It won't show meta as M but as T
if $TERM_PROGRAM == "iTerm.app"
    nmap <T-p> <M-p>
    nmap <T-P> <M-p>
    nnoremap <S-T-Up>    <S-M-Up>
    nnoremap <S-T-Down>  <S-M-Down>
    nnoremap <S-T-Left>  <S-M-Left>
    nnoremap <S-T-Right> <S-M-Right>
    nnoremap <T-Up>      <M-Up>
    nnoremap <T-Down>    <M-Down>
    nnoremap <T-Left>    <M-Left>
    nnoremap <T-Right>   <M-Right>
endif
" Mappings end }}}
" Autocmds {{{
" Vim {{{
augroup vim
    au!
    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au FileType help nnoremap <silent> <buffer> q :q<CR>
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
" }}}
" Return to last edit position when opening files (You want this!) {{{
augroup last_pos
    autocmd!
    autocmd BufReadPost *
		\ if line("'\"") > 0 && line("'\"") <= line("$") |
		\   exe "normal! g`\"" |
		\ endif
augroup END
" }}}
" Misc {{{
augroup misc
    au!
    " Auto-reload vimrc on save
    autocmd BufWritePost $MYVIMRC source $MYVIMRC

    " Save on focus lost.
    autocmd FocusLost * :silent! :w

    " Resize splits when the window is resized
    autocmd VimResized * :wincmd =

    " Exit paste mode when exiting insert
    autocmd InsertLeave * set nopaste
augroup END

au BufNewFile,BufRead /dev/shm/gopass.* setlocal noswapfile nobackup noundofile
" }}}
" Autocmds end }}}
" Visual stuff {{{
if &t_Co > 2 || has("gui_running")
    " switch syntax highlighting on, when the terminal has colors
    syntax enable
endif

if has("gui_running")
    set ttyfast
    set guifont="Iosevka:h11"
endif

if has("gui_running") || has("nvim")
    " MacVim runtime path fix
    set rtp+=/opt/local/share/vim/vimfiles
endif

" Highlight 'ugly' code {{{
" Highlight lines longer than 120 chars
match ErrorMsg '\%>120v.\+'
" Highlight trailing spaces
match ErrorMsg '\s\+$'
" }}}

if &t_Co >= 256 || has("gui_running")
    colorscheme deep-space
    set background=dark

    let g:doxygen_enhanced_color=1
    highlight doxygenBrief ctermbg=240

    if exists("+termguicolors")
	set termguicolors
    endif
    let g:deepspace_italics=1
    let macvim_skip_colorscheme = 1
    let g:airline_theme = 'deep_space'
endif
" }}}
" Custom functions {{{
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

function! GoyoBefore()
  Limelight
endfunction

function! GoyoAfter()
  Limelight!
endfunction

let g:goyo_callbacks = [function('GoyoBefore'), function('GoyoAfter')]
" }}}
